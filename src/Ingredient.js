import React, { useEffect, useState, useCallback, useRef } from 'react';
import axios from 'axios';
import logo from './image/favicon-48x48.png';
import './css/ingredient.css';
import IngredientEffects from './components/IngredientEffects';
import Header from './Header';

export default function IngredientManager() {
  const API = 'http://localhost:8099/api/ingredients';
  const effectsRef = useRef(null);

  const [ingredients, setIngredients] = useState([]);
  const [search, setSearch] = useState('');
  const [formData, setFormData] = useState({
    id: null,
    name: '',
    quantity: '',
    unit_price: '',
    unit: '',
    origin: ''
  });
  const [editing, setEditing] = useState(false);
  const [message, setMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [userInfo, setUserInfo] = useState({
    fullName: 'Guest',
    role: 'MANAGER'
  });

  const [page, setPage] = useState(0);
  const [size] = useState(10);
  const [totalPages, setTotalPages] = useState(0);

  useEffect(() => {
    effectsRef.current = new IngredientEffects();
    effectsRef.current.addTableAnimations();
    effectsRef.current.addFormEffects();
    effectsRef.current.addSearchEffects();
    effectsRef.current.addButtonEffects();
    effectsRef.current.addMessageEffects();
    effectsRef.current.addLogoEffects();
    effectsRef.current.addUserInfoEffects();
    
    const fullName = localStorage.getItem('full_name') || 'Guest';
    const role = localStorage.getItem('role') || 'MANAGER';
    setUserInfo({ fullName, role });
  }, []);

  const fetchIngredients = useCallback(async () => {
    try {
      const res = await axios.get(`${API}${search ? '/search' : ''}`, {
        params: {
          name: search,
          page,
          size,
        },
        headers: {
          Authorization: 'Bearer ' + localStorage.getItem('token'),
        },
        withCredentials: true,
      });
      setIngredients(res.data.content);
      setTotalPages(res.data.totalPages);
    } catch (err) {
      console.error('L·ªói khi t·∫£i nguy√™n li·ªáu:', err);
      if (err.response?.status === 403) {
        setMessage('‚ùå Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p nguy√™n li·ªáu. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ho·∫∑c d√πng t√†i kho·∫£n ph√π h·ª£p.');
      }
    }
  }, [search, page, size]);
  
  useEffect(() => {
    fetchIngredients();
  }, [fetchIngredients]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    
    const dto = {
      name: formData.name,
      quantity: formData.quantity,
      unit_price: formData.unit_price,
      unit: formData.unit,
      origin: formData.origin
    };

    try {
      if (editing) {
        await axios.put(`${API}/${formData.id}`, dto, {
          headers: {
            Authorization: 'Bearer ' + localStorage.getItem('token'),
          },
          withCredentials: true,
        });
        setMessage('‚úÖ C·∫≠p nh·∫≠t nguy√™n li·ªáu th√†nh c√¥ng!');
      } else {
        await axios.post(API, dto, {
          headers: {
            Authorization: 'Bearer ' + localStorage.getItem('token'),
          },
          withCredentials: true,
        });
        setMessage('‚úÖ Th√™m nguy√™n li·ªáu th√†nh c√¥ng!');
      }

      setFormData({ id: null, name: '', quantity: '', unit_price: '', unit: '', origin: '' });
      setEditing(false);
      fetchIngredients();

      // Auto hide message after 3 seconds
      setTimeout(() => {
        setMessage('');
      }, 3000);

    } catch (err) {
      setMessage('‚ùå L·ªói khi l∆∞u nguy√™n li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleEdit = (ingredient) => {
    setFormData({
      id: ingredient.id_ingredient,
      name: ingredient.name,
      quantity: ingredient.quantity,
      unit_price: ingredient.unit_price,
      unit: ingredient.unit,
      origin: ingredient.origin
    });
    setEditing(true);
    
    // Scroll to form
    document.querySelector('.ingredient-form').scrollIntoView({ behavior: 'smooth' });
  };

  const handleDelete = async (id) => {
    if (!window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° nguy√™n li·ªáu n√†y?')) return;
    
    setIsLoading(true);
    try {
      await axios.delete(`${API}/${id}`, {
        headers: {
          Authorization: 'Bearer ' + localStorage.getItem('token'),
        },
        withCredentials: true,
      });
      setMessage('‚úÖ ƒê√£ xo√° nguy√™n li·ªáu th√†nh c√¥ng!');
      fetchIngredients();
      
      // Auto hide message after 3 seconds
      setTimeout(() => {
        setMessage('');
      }, 3000);
    } catch (err) {
      setMessage('‚ùå L·ªói khi xo√° nguy√™n li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleCancel = () => {
    setFormData({ id: null, name: '', quantity: '', unit_price: '', unit: '', origin: '' });
    setEditing(false);
  };

  return (
    <>
      <Header />
      <div className="ingredient-container">
        {/* Header */}
        <div className="ingredient-header">
          <div className="header-content">
            <div className="logo-section">
              <img src={logo} alt="Restaurant Logo" className="ingredient-logo" />
              <div className="logo-text">
                <h1>Qu·∫£n l√Ω nguy√™n li·ªáu</h1>
                <p>H·ªá th·ªëng qu·∫£n l√Ω nh√† h√†ng</p>
              </div>
            </div>
            <div className="user-section">
              <div className="user-info">
                <div className="user-avatar">
                  <span className="avatar-text">{userInfo.fullName.charAt(0)}</span>
                </div>
                <div className="user-details">
                  <p className="user-name">{userInfo.fullName}</p>
                  <p className="user-role">{userInfo.role}</p>
                </div>
              </div>
              <button 
                onClick={() => window.history.back()} 
                className="back-btn"
              >
                ‚Üê Quay l·∫°i
              </button>
            </div>
          </div>
        </div>

        {/* Message */}
        {message && (
          <div className={`ingredient-message ${message.includes('‚úÖ') ? 'success' : 'error'}`}>
            <span>{message}</span>
          </div>
        )}

        <div className="ingredient-content">
          <div className="content-header">
            <h2 className="section-title">üì¶ Qu·∫£n l√Ω nguy√™n li·ªáu</h2>
            <div className="stats-cards">
              <div className="stat-card">
                <div className="stat-icon">üì¶</div>
                <div className="stat-info">
                  <span className="stat-number">{ingredients.length}</span>
                  <span className="stat-label">T·ªïng nguy√™n li·ªáu</span>
                </div>
              </div>
              <div className="stat-card">
                <div className="stat-icon">üîç</div>
                <div className="stat-info">
                  <span className="stat-number">{ingredients.filter(ing => ing.quantity > 0).length}</span>
                  <span className="stat-label">C√≤n h√†ng</span>
                </div>
              </div>
              <div className="stat-card">
                <div className="stat-icon">üí∞</div>
                <div className="stat-info">
                  <span className="stat-number">
                    {ingredients.reduce((sum, ing) => sum + (ing.quantity * ing.unit_price), 0).toLocaleString()}
                  </span>
                  <span className="stat-label">T·ªïng gi√° tr·ªã</span>
                </div>
              </div>
            </div>
          </div>

          {/* Search Section */}
          <div className="search-section">
            <div className="search-box">
              <span className="search-icon">üîç</span>
              <input
                type="text"
                placeholder="T√¨m ki·∫øm theo t√™n nguy√™n li·ªáu..."
                value={search}
                onChange={(e) => {
                  setSearch(e.target.value);
                  setPage(0);
                }}
                className="search-input"
              />
            </div>
            {search && (
              <button 
                onClick={() => {
                  setSearch('');
                  setPage(0);
                }}
                className="clear-search-btn"
              >
                ‚úï X√≥a t√¨m ki·∫øm
              </button>
            )}
          </div>

          {/* Form Section */}
          <div className="form-section">
            <h3 className="form-title">üìù {editing ? 'C·∫≠p nh·∫≠t nguy√™n li·ªáu' : 'Th√™m nguy√™n li·ªáu m·ªõi'}</h3>
            <form onSubmit={handleSubmit} className="ingredient-form">
              <div className="form-grid">
                <div className="form-group">
                  <label className="form-label">T√™n nguy√™n li·ªáu</label>
                  <input 
                    name="name" 
                    placeholder="Nh·∫≠p t√™n nguy√™n li·ªáu" 
                    value={formData.name} 
                    onChange={handleChange} 
                    required 
                    className="form-input"
                  />
                </div>
                <div className="form-group">
                  <label className="form-label">S·ªë l∆∞·ª£ng</label>
                  <input 
                    name="quantity" 
                    type="number" 
                    placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng" 
                    value={formData.quantity} 
                    onChange={handleChange} 
                    required 
                    className="form-input"
                  />
                </div>
                <div className="form-group">
                  <label className="form-label">ƒê∆°n gi√° (VNƒê)</label>
                  <input 
                    name="unit_price" 
                    type="number" 
                    placeholder="Nh·∫≠p ƒë∆°n gi√°" 
                    value={formData.unit_price} 
                    onChange={handleChange} 
                    required 
                    className="form-input"
                  />
                </div>
                <div className="form-group">
                  <label className="form-label">ƒê∆°n v·ªã</label>
                  <input 
                    name="unit" 
                    placeholder="kg, gam, l√≠t..." 
                    value={formData.unit} 
                    onChange={handleChange} 
                    required 
                    className="form-input"
                  />
                </div>
                <div className="form-group full-width">
                  <label className="form-label">Xu·∫•t x·ª©</label>
                  <input 
                    name="origin" 
                    placeholder="Nh·∫≠p xu·∫•t x·ª© nguy√™n li·ªáu" 
                    value={formData.origin} 
                    onChange={handleChange} 
                    required 
                    className="form-input"
                  />
                </div>
              </div>
              
              <div className="form-actions">
                <button 
                  type="submit" 
                  className={`submit-btn ${isLoading ? 'loading' : ''}`}
                  disabled={isLoading}
                >
                  {isLoading ? (
                    <>
                      <span className="loading-spinner"></span>
                      ƒêang x·ª≠ l√Ω...
                    </>
                  ) : (
                    editing ? '‚úÖ C·∫≠p nh·∫≠t' : '‚ûï Th√™m m·ªõi'
                  )}
                </button>
                {editing && (
                  <button 
                    type="button" 
                    onClick={handleCancel}
                    className="cancel-btn"
                  >
                    ‚ùå H·ªßy
                  </button>
                )}
              </div>
            </form>
          </div>

          {/* Ingredients Table */}
          <div className="table-section">
            <h3 className="table-title">üìã Danh s√°ch nguy√™n li·ªáu</h3>
            
            {ingredients.length > 0 ? (
              <div className="table-container">
                <table className="ingredient-table">
                  <thead>
                    <tr>
                      <th>ID</th>
                      <th>T√™n nguy√™n li·ªáu</th>
                      <th>S·ªë l∆∞·ª£ng</th>
                      <th>ƒê∆°n gi√°</th>
                      <th>ƒê∆°n v·ªã</th>
                      <th>Xu·∫•t x·ª©</th>
                      <th>H√†nh ƒë·ªông</th>
                    </tr>
                  </thead>
                  <tbody>
                    {ingredients.map((ing, index) => (
                      <tr key={ing.id_ingredient} className="ingredient-row" style={{ animationDelay: `${index * 0.1}s` }}>
                        <td className="ingredient-id">
                          <span className="id-badge">#{ing.id_ingredient}</span>
                        </td>
                        <td className="ingredient-name">{ing.name}</td>
                        <td className="ingredient-quantity">
                          <span className={`quantity-badge ${ing.quantity > 0 ? 'in-stock' : 'out-of-stock'}`}>
                            {ing.quantity}
                          </span>
                        </td>
                        <td className="ingredient-price">
                          <span className="price">{ing.unit_price.toLocaleString()}ƒë</span>
                        </td>
                        <td className="ingredient-unit">{ing.unit}</td>
                        <td className="ingredient-origin">{ing.origin}</td>
                        <td className="ingredient-actions">
                          <button 
                            onClick={() => handleEdit(ing)}
                            className="edit-btn"
                          >
                            ‚úèÔ∏è S·ª≠a
                          </button>
                          <button 
                            onClick={() => handleDelete(ing.id_ingredient)}
                            className="delete-btn"
                            disabled={isLoading}
                          >
                            üóëÔ∏è Xo√°
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <div className="empty-state">
                <div className="empty-icon">üì¶</div>
                <h3>Ch∆∞a c√≥ nguy√™n li·ªáu n√†o</h3>
                <p>
                  {search 
                    ? `Kh√¥ng c√≥ k·∫øt qu·∫£ n√†o cho "${search}"`
                    : 'H√£y th√™m nguy√™n li·ªáu m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu qu·∫£n l√Ω kho h√†ng.'
                  }
                </p>
                {search && (
                  <button 
                    onClick={() => {
                      setSearch('');
                      setPage(0);
                    }}
                    className="clear-search-btn"
                  >
                    ‚úï X√≥a t√¨m ki·∫øm
                  </button>
                )}
              </div>
            )}

            {/* Pagination */}
            {totalPages > 1 && (
              <div className="pagination">
                <button 
                  disabled={page === 0} 
                  onClick={() => setPage(prev => prev - 1)}
                  className="pagination-btn"
                >
                  ‚óÄ Tr∆∞·ªõc
                </button>
                <span className="page-info">Trang {page + 1} / {totalPages}</span>
                <button 
                  disabled={page + 1 >= totalPages} 
                  onClick={() => setPage(prev => prev + 1)}
                  className="pagination-btn"
                >
                  Sau ‚ñ∂
                </button>
              </div>
            )}
          </div>
        </div>

        {/* Loading Overlay */}
        {isLoading && (
          <div className="loading-overlay">
            <div className="loading-spinner"></div>
            <p>ƒêang x·ª≠ l√Ω...</p>
          </div>
        )}
      </div>
    </>
  );
}